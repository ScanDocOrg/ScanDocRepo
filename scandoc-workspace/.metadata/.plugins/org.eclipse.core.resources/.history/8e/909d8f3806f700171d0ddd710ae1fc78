package scandoc.Documents;

import scandoc.MainWindow;
import scandoc.Fichier.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Text;
import org.eclipse.wb.swt.SWTResourceManager;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.FormAttachment;


public class CompChercherUnDocument extends Composite {
	private Text txtNom;
	private Text txtMatricule;
	public Table table;
	public Button rdEleve;
	public Button rdProfesseur;
	public XConfigFile configFile;
	/**
	 * Create the composite.
	 * @param parent
	 * @param style
	 */
	public CompChercherUnDocument(Composite parent, int style) {
		super(parent, style);
		setBackground(SWTResourceManager.getColor(SWT.COLOR_WIDGET_BACKGROUND));
		setLayout(new FormLayout());
		
		configFile = MainWindow.configFile;
		
		
		RowLayout rl_grpTypeIndividu = new RowLayout(SWT.HORIZONTAL);
		rl_grpTypeIndividu.wrap = false;
		rl_grpTypeIndividu.marginBottom = 6;
		rl_grpTypeIndividu.justify = true;
		rl_grpTypeIndividu.fill = true;
		rl_grpTypeIndividu.center = true;
		
		
		Group group = new Group(this, SWT.NONE);
		FormData fd_group = new FormData();
		fd_group.left = new FormAttachment(0, 10);
		fd_group.right = new FormAttachment(100, -10);
		group.setLayoutData(fd_group);
		group.setBackground(SWTResourceManager.getColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
		group.setText("Chercher par nom");
		group.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.BOLD));
		
		Label label = new Label(group, SWT.NONE);
		label.setBackground(SWTResourceManager.getColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
		label.setText("Nom :");
		label.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		label.setBounds(10, 23, 55, 21);
		
		txtNom = new Text(group, SWT.BORDER);
		txtNom.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		txtNom.setBounds(59, 23, 371, 23);
		
		Button btnNomChercher = new Button(group, SWT.NONE);
		btnNomChercher.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				String selection = getRadioSelection();
				//String matricule = te
				if(selection != "null" && txtNom.getText() != "") {
					selectDocumentsByNom(txtNom.getText(), selection);
				}
			}
		});
		btnNomChercher.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		btnNomChercher.setText("Chercher");
		btnNomChercher.setBounds(182, 52, 75, 25);
		
		Label label_2 = new Label(group, SWT.SEPARATOR | SWT.VERTICAL);
		label_2.setBounds(277, 58, 2, 17);
		
		Group group_1 = new Group(this, SWT.NONE);
		fd_group.bottom = new FormAttachment(100, -344);
		FormData fd_group_1 = new FormData();
		fd_group_1.top = new FormAttachment(group, 6);
		fd_group_1.left = new FormAttachment(group, 0, SWT.LEFT);
		fd_group_1.right = new FormAttachment(100, -10);
		group_1.setLayoutData(fd_group_1);
		group_1.setBackground(SWTResourceManager.getColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
		group_1.setText("Chercher par matricule");
		group_1.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.BOLD));
		
		Label label_1 = new Label(group_1, SWT.NONE);
		label_1.setBackground(SWTResourceManager.getColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));
		label_1.setText("Matricule :");
		label_1.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		label_1.setBounds(10, 25, 75, 21);
		
		txtMatricule = new Text(group_1, SWT.BORDER);
		txtMatricule.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		txtMatricule.setBounds(91, 25, 339, 23);
		
		Button btnMatriculeChercher = new Button(group_1, SWT.NONE);
		btnMatriculeChercher.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				String selection = getRadioSelection();
				if(selection != "null" && txtMatricule.getText() != "") {
					selectDocumentsByMatricule(txtMatricule.getText(), selection);
				}
			}
		});
		btnMatriculeChercher.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		btnMatriculeChercher.setText("Chercher");
		btnMatriculeChercher.setBounds(182, 54, 75, 25);
		
		Group grpResult = new Group(this, SWT.NONE);
		fd_group_1.bottom = new FormAttachment(100, -250);
		FormData fd_grpResult = new FormData();
		fd_grpResult.top = new FormAttachment(group_1, 6);
		fd_grpResult.bottom = new FormAttachment(0, 490);
		fd_grpResult.right = new FormAttachment(0, 450);
		fd_grpResult.left = new FormAttachment(0, 10);
		grpResult.setLayoutData(fd_grpResult);
		grpResult.setText("R\u00E9sultats");
		grpResult.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.BOLD));
		///

		
		Group grpTypeIndividu = new Group(this, SWT.NONE);
		fd_group.top = new FormAttachment(grpTypeIndividu, 6);
		FormData fd_grpTypeIndividu = new FormData();
		fd_grpTypeIndividu.bottom = new FormAttachment(100, -438);
		fd_grpTypeIndividu.top = new FormAttachment(0, 10);
		fd_grpTypeIndividu.right = new FormAttachment(0, 450);
		fd_grpTypeIndividu.left = new FormAttachment(0, 10);
		grpTypeIndividu.setLayout(rl_grpTypeIndividu);
		grpTypeIndividu.setLayoutData(fd_grpTypeIndividu);
		grpTypeIndividu.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.BOLD));
		grpTypeIndividu.setText("Type individu");
		
		rdEleve = new Button(grpTypeIndividu, SWT.RADIO);
		rdEleve.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		rdEleve.setText("El\u00E9ve");
		
		rdProfesseur = new Button(grpTypeIndividu, SWT.RADIO);
		rdProfesseur.setText("Professeur");
		rdProfesseur.setFont(SWTResourceManager.getFont("Segoe UI", 11, SWT.NORMAL));
		String[] titles = {"ID document", "Matricule", "Nom", "Type Document", "Document"};
		
		table = new Table (grpResult, SWT.MULTI | SWT.BORDER | SWT.FULL_SELECTION);
		table.setBounds(0, 22, 440, 212);
		//table.setBounds(35, 324, 51, 39);
		table.setHeaderVisible(true);
		table.setLinesVisible(true);
		
		GridData data = new GridData(SWT.FILL, SWT.FILL, true, true);
		data.heightHint = 200;
		table.setLayoutData(data);
		
		for (int i=0; i<titles.length; i++) {
			TableColumn column = new TableColumn (table, SWT.NONE);
			column.setText (titles [i]);
			table.getColumn (i).setWidth(147);
		}
		
	}

	private void selectDocumentsByMatricule(String matricule,String type) {
		String query = "";
		if(type == "professeur") {
			query = "SELECT DOCUMENT.ID_DOCUMENT AS ID, "+
					"PROFESSEUR.MATRICULE AS MATRICULE, " + 
					"PROFESSEUR.NOM AS NOM, " + 
					"TYPE_DOCUMENT.NOM AS TYPE_DOCUMENT, " + 
					"DOCUMENT.NOM AS DOCUMENT " + 
					"FROM DOCUMENT " + 
					"INNER JOIN PROFESSEUR ON PROFESSEUR.IDPROFESSEUR = DOCUMENT.ID_PROFESSEUR " + 
					"INNER JOIN TYPE_DOCUMENT ON TYPE_DOCUMENT.TYPE_DOCUMENT_ID = DOCUMENT.ID_TYPE_DOCUMENT " + 
					"WHERE MATRICULE='"+ matricule +"';"; 
		}else {
			query = "SELECT DOCUMENT.ID_DOCUMENT AS ID, " +
					"ELEVE.MATRICULE AS MATRICULE, " +
					"ELEVE.NOM AS NOM, " +
					"TYPE_DOCUMENT.NOM AS TYPE_DOCUMENT, " + 
					"DOCUMENT.NOM AS DOCUMENT " + 
					"FROM DOCUMENT " + 
					"INNER JOIN ELEVE ON ELEVE.IDELEVE = DOCUMENT.ID_ELEVE " + 
					"INNER JOIN TYPE_DOCUMENT ON TYPE_DOCUMENT.TYPE_DOCUMENT_ID = DOCUMENT.ID_TYPE_DOCUMENT " + 
					"WHERE ELEVE.MATRICULE='"+ matricule +"';";
		}
		
		selectDocument(query);
	}
	
	private void selectDocumentsByNom(String nom, String type) {
		String query = "";
		if(type == "professeur") {
			query = "SELECT DOCUMENT.ID_DOCUMENT AS ID,"+
					"PROFESSEUR.MATRICULE AS MATRICULE, " +
					"PROFESSEUR.NOM AS NOM," + 
					"TYPE_DOCUMENT.NOM AS TYPE_DOCUMENT, " + 
					"DOCUMENT.NOM AS DOCUMENT " + 
					"FROM DOCUMENT " + 
					"INNER JOIN PROFESSEUR ON PROFESSEUR.IDPROFESSEUR = DOCUMENT.ID_PROFESSEUR " + 
					"INNER JOIN TYPE_DOCUMENT ON TYPE_DOCUMENT.TYPE_DOCUMENT_ID = DOCUMENT.ID_TYPE_DOCUMENT " + 
					"WHERE NOM='"+ nom +"';"; 
		}else {
			query = "SELECT DOCUMENT.ID_DOCUMENT AS ID, " +
					"ELEVE.MATRICULE AS MATRICULE, " +
					"ELEVE.NOM AS NOM, " +
					"TYPE_DOCUMENT.NOM AS TYPE_DOCUMENT, " + 
					"DOCUMENT.NOM AS DOCUMENT " +  
					"FROM DOCUMENT " + 
					"INNER JOIN ELEVE ON ELEVE.IDELEVE = DOCUMENT.ID_ELEVE " + 
					"INNER JOIN TYPE_DOCUMENT ON TYPE_DOCUMENT.TYPE_DOCUMENT_ID = DOCUMENT.ID_TYPE_DOCUMENT " + 
					"WHERE NOM='"+ nom +"';";
		}
		selectDocument(query);
	}
	
	private void selectDocument(String query){
		Connection conn = null;
		Statement stmt =null;
		
		try {
			conn = connect();
			conn.setAutoCommit(false);
			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(query);
			
			if(conn != null) {
				int items = table.getItemCount();
				for(int i=items; i>0; i--) {
					table.remove(i-1);
				}
				table.clearAll();
				while(rs.next()) {
					TableItem item = new TableItem (table, SWT.NONE);
					item.setText (0, rs.getString("ID"));
					item.setText (1, rs.getString("MATRICULE"));
					item.setText (2, rs.getString("NOM"));
					item.setText (3, rs.getString("TYPE_DOCUMENT"));
					item.setText (3, rs.getString("DOCUMENT"));
				}
				
				conn.close();
				table.getParent().layout();
			}
		}catch(SQLException ex1) {
			System.out.println(ex1.getMessage());
			System.out.println("In document");
		} 
		
	}
	
	private Connection connect() {
        // SQLite connection string
		String url = "jdbc:sqlite:"+ configFile.getFolderPath() +"/database/scandocdb.db";
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(url);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return conn;
    }
	
	private String getRadioSelection() {
		if (rdProfesseur.getSelection()) {
			return "professeur";
		}else if (rdEleve.getSelection()) {
			return "eleve";
		}else {
			return "null";
		}
	}
	
	
	@Override
	protected void checkSubclass() {
		// Disable the check that prevents subclassing of SWT components
	}
}
