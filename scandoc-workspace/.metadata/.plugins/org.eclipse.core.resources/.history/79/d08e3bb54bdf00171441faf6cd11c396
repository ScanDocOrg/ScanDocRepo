package scandoc;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.StackLayout;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.Monitor;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TableItem;

import scandoc.Documents.CompChercherUnDocument;
import scandoc.Documents.DiagConfirmationEffacementDocument;
import scandoc.Documents.DiagDetailDocument;
import scandoc.Documents.DiagImporterDocument;
import scandoc.Eleves.CompChercherUnEleve;
import scandoc.Eleves.CompDetailEleve;
import scandoc.Eleves.DiagConfirmationEffacementEleve;
import scandoc.Eleves.DiagCreerUnEleve;
import scandoc.Events.EleveErasedEvent;
import scandoc.Events.EleveErasedListener;
import scandoc.Fichier.CompCreerNouvelleDB;
import scandoc.Fichier.CompCreerUnBackup;
import scandoc.Fichier.CompRestaurerUnBackup;
import scandoc.Misc.CompAccueil;
import scandoc.Misc.DiagHelp;
import scandoc.Misc.DiagNotice;
import scandoc.Professeurs.CompChercherUnProfesseur;
import scandoc.Professeurs.CompDetailProfesseur;
import scandoc.Professeurs.DiagConfirmationEffacementProfesseur;
import scandoc.Professeurs.DiagCreerUnProfesseur;
import scandoc.TypeDocument.CompChercherTypeDocument;
import scandoc.TypeDocument.DiagConfirmationEffacementTypeDocument;
import scandoc.TypeDocument.DiagCreerTypeDocument;

public class MainWindow implements EleveErasedListener {

	//CompChercherUnDocument compChercherUnDocument;
	//DiagConfirmationEffacementDocument diagConfirmationEffacementDocument;
	
	
	static int pageNum = -1;
	static String matricule;
	static String prenom;
	static String nom;
	static String nomDocument;
	//CompChercherUnEleve compChercherUnEleve;
	//CompChercherUnProfesseur compChercherUnProfesseur;
	//static CompDetailEleve compDetailEleve;
	/**
	 * Launch the application.
	 * @param args
	 */
	
	public static void main(String[] args) {
		
		//
		// Initialisaztion
		//
		Display display = Display.getDefault();
		Shell shell = new Shell();
		
		Monitor primary = display.getPrimaryMonitor ();
		Rectangle bounds = primary.getBounds ();
		Rectangle rect = shell.getBounds ();
		int x = (bounds.width-460)/2;
		int y = (bounds.height-500)/2;
		//shell.setLocation (x, y);
		shell.setBounds(x, y,460, 500);
		
		//StackLayout handle dynamically created composite 
		final Composite contentPanel = new Composite(shell, SWT.BORDER);
	    contentPanel.setBounds(0, 0, 460, 500);
	    final StackLayout layout = new StackLayout();
	    contentPanel.setLayout(layout);
	    
			    
	    //
		//Initialisation Vues
		//
	    
	    // Fichiers
	    CompCreerNouvelleDB compCreerNouvelleDB = new CompCreerNouvelleDB(contentPanel, SWT.NONE);
	    compCreerNouvelleDB.setLayout(null);
	    CompCreerUnBackup compCreerUnBackup = new CompCreerUnBackup(contentPanel, SWT.NONE);
	    compCreerUnBackup.setLayout(null);
	    CompRestaurerUnBackup compRestaurerUnBackup = new CompRestaurerUnBackup(contentPanel, SWT.NONE);
	    compRestaurerUnBackup.setLayout(null);
	    
	        
		// Documents
	    CompChercherUnDocument compChercherUnDocument = new CompChercherUnDocument(contentPanel, SWT.NONE);
	    compChercherUnDocument.setLayout(null);
	    DiagConfirmationEffacementDocument diagConfirmationEffacementDocument = new DiagConfirmationEffacementDocument(shell, SWT.NONE);
		DiagDetailDocument diagDetailDocument = new DiagDetailDocument(shell, SWT.NONE);
		DiagImporterDocument diagImporterDocument = new DiagImporterDocument(shell, SWT.NONE);
//////////
		// Elèves
		DiagConfirmationEffacementEleve diagConfirmationEffacementEleve = new DiagConfirmationEffacementEleve(shell, SWT.NONE);
		
		//compDetailEleve.setLayout(null);	
		CompChercherUnEleve compChercherUnEleve = new CompChercherUnEleve(contentPanel, SWT.NONE);
		compChercherUnEleve.setLayout(null);	
//////////		
		// Misc
		CompAccueil compAccueil = new CompAccueil(contentPanel, SWT.NONE);
		compAccueil.setLayout(null);
		DiagHelp diagHelp = new DiagHelp(shell, SWT.NONE);
		DiagNotice diagNotice = new DiagNotice(shell, SWT.NONE);
		
		// Professeurs
		CompChercherUnProfesseur compChercherUnProfesseur = new CompChercherUnProfesseur(contentPanel, SWT.NONE);
		compChercherUnProfesseur.setLayout(null);
		//CompDetailProfesseur compDetailProfesseur = new CompDetailProfesseur(contentPanel,SWT.NONE);
		//
		DiagConfirmationEffacementProfesseur diagConfirmationEffacementProfesseur = new DiagConfirmationEffacementProfesseur(shell, SWT.NONE);
		
		
		// TypeDocument
		CompChercherTypeDocument compChercherTypeDocument = new CompChercherTypeDocument(contentPanel, SWT.NONE);
		compChercherTypeDocument.setLayout(null);
		DiagConfirmationEffacementTypeDocument diagConfirmationEffacementTypeDocument = new DiagConfirmationEffacementTypeDocument(shell,SWT.NONE );
		
		
		shell.setSize(476, 561);
		shell.setText("Scandoc");
		shell.setLayout(null);
		
		//
		// MENU
		//
		Menu menu_1 = new Menu(shell, SWT.BAR);
		shell.setMenuBar(menu_1);
		
		//
		// Fichiers
		//
		MenuItem mntmFiles = new MenuItem(menu_1, SWT.CASCADE);
		mntmFiles.setText("Fichiers");
		
		Menu menuFichiers = new Menu(mntmFiles);
		mntmFiles.setMenu(menuFichiers);
		
		// Créer une nouvelle DB
		MenuItem mntmCreerNouvelleDb = new MenuItem(menuFichiers, SWT.NONE);
		mntmCreerNouvelleDb.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Menu Creer Nouvelle BD sélectionné.");
				layout.topControl = compCreerNouvelleDB;
				contentPanel.layout();
			}
		});
		mntmCreerNouvelleDb.setText("Cr\u00E9er une  nouvelle base de donn\u00E9es");
		
		// Créer un backup
		MenuItem mntmCreerBackup = new MenuItem(menuFichiers, SWT.NONE);
		mntmCreerBackup.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Menu Creer Backup");
				layout.topControl = compCreerUnBackup;
				contentPanel.layout();
			}
		});
		mntmCreerBackup.setText("Cr\u00E9er un backup");
		
		// Restaurer un backup
		MenuItem mntmRestaurerBackup = new MenuItem(menuFichiers, SWT.NONE);
		mntmRestaurerBackup.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Menu Restaurer Backup");
				layout.topControl = compRestaurerUnBackup;
				contentPanel.layout();
			}
		});
		mntmRestaurerBackup.setText("Restaurer un backup");
		
		// Quitter
		MenuItem mntmQuitter = new MenuItem(menuFichiers, SWT.NONE);
		mntmQuitter.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Menu Quitter");
				shell.close(); 
			}
		});
		mntmQuitter.setText("Quitter");
		
		//
		// Professeurs
		//
		MenuItem mntmProfesseurs = new MenuItem(menu_1, SWT.CASCADE);
		mntmProfesseurs.setText("Professeurs");
		
		Menu menuProfesseurs = new Menu(mntmProfesseurs);
		mntmProfesseurs.setMenu(menuProfesseurs);
		
		// Chercher un professeur
		MenuItem mntmChercherProfesseur = new MenuItem(menuProfesseurs, SWT.NONE);
		mntmChercherProfesseur.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Menu Chercher Professeur");
				layout.topControl = compChercherUnProfesseur; 
				contentPanel.layout();
				
				compChercherUnProfesseur.table.addListener (SWT.Selection, event -> {
					//String string = event.detail == SWT.CHECK ? "Checked" : "Selected";
					TableItem current = (TableItem)event.item;
					System.out.println (current.getText());
					
					matricule = current.getText();
					
					CompDetailProfesseur compDetailProfesseur = new CompDetailProfesseur(contentPanel, SWT.NONE, shell, matricule);
					compDetailProfesseur.setLayout(null);
					System.out.println (current.getText());
					layout.topControl = compDetailProfesseur;
					contentPanel.layout();
				});
				
			}
		});
		mntmChercherProfesseur.setText("Chercher un professeur");
		
		//Créer un professeur
		MenuItem mntmCreerProfesseur = new MenuItem(menuProfesseurs, SWT.NONE);
		mntmCreerProfesseur.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Menu Creer Professeur");
				DiagCreerUnProfesseur diagCreerUnProfesseur = new DiagCreerUnProfesseur(shell, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);							
				diagCreerUnProfesseur.open();
				
				matricule = diagCreerUnProfesseur.matricule;
				nom = diagCreerUnProfesseur.nom;
				prenom = diagCreerUnProfesseur.prenom;
				
			}
		});
		mntmCreerProfesseur.setText("Cr\u00E9er un professeur");
		
//////////
		// Elèves
		//
		MenuItem mntmElves = new MenuItem(menu_1, SWT.CASCADE);
		mntmElves.setText("El\u00E8ves");
		
		Menu menuEleves = new Menu(mntmElves);
		mntmElves.setMenu(menuEleves);
		
		// Chercher un élève
		MenuItem mntmChercherEleve = new MenuItem(menuEleves, SWT.NONE);
		mntmChercherEleve.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Menu Chercher Elève");
				layout.topControl = compChercherUnEleve;
				contentPanel.layout();
				
				compChercherUnEleve.table.addListener (SWT.Selection, event -> {
					String string = event.detail == SWT.CHECK ? "Checked" : "Selected";
					TableItem current = (TableItem)event.item;
					matricule = current.getText();
					
					CompDetailEleve compDetailEleve = new CompDetailEleve(contentPanel, SWT.NONE, shell, matricule);
					compDetailEleve.setLayout(null);
					System.out.println (current.getText());
					layout.topControl = compDetailEleve;
					contentPanel.layout();
				});
			}
		});
		mntmChercherEleve.setText("Chercher un \u00E9l\u00E8ve");
		
		// Creer un élève
		MenuItem mntmCreerEleve = new MenuItem(menuEleves, SWT.NONE);
		mntmCreerEleve.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Menu Creer Eleve");
				DiagCreerUnEleve diagCreerUnEleve = new DiagCreerUnEleve(shell, SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL); 
				diagCreerUnEleve.open();
				matricule = diagCreerUnEleve.matricule;
				nom = diagCreerUnEleve.nom;
				prenom = diagCreerUnEleve.prenom;
				
				// Do Stuffs...
			}
		});
		mntmCreerEleve.setText("Cr\u00E9er un \u00E9l\u00E8ve");
		
//////////
		//
		// Document
		//
		MenuItem mntmDocuments = new MenuItem(menu_1, SWT.CASCADE);
		mntmDocuments.setText("Documents");
		
		Menu menuDocuments = new Menu(mntmDocuments);
		mntmDocuments.setMenu(menuDocuments);
		
		// Chercher un document
		MenuItem mntmChercherDocument = new MenuItem(menuDocuments, SWT.NONE);
		mntmChercherDocument.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Menu Chercher Document");
				layout.topControl= compChercherUnDocument;
				contentPanel.layout();
				
				compChercherUnDocument.table.addListener (SWT.Selection, event -> {
					TableItem current = (TableItem)event.item;
					System.out.println (current.getText());
				});
			}
		});
		mntmChercherDocument.setText("Chercher un document");
		
		//
		// TypeDocument
		//
		MenuItem mntmTypesDocument = new MenuItem(menuDocuments, SWT.CASCADE);
		mntmTypesDocument.setText("Types Document");
		
		Menu menuTypeDocument = new Menu(mntmTypesDocument);
		mntmTypesDocument.setMenu(menuTypeDocument);
		
		// Chercher un type de document
		MenuItem mntmChercherTypeDocu = new MenuItem(menuTypeDocument, SWT.NONE);
		mntmChercherTypeDocu.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Menu Chercher Type Document");
				layout.topControl=compChercherTypeDocument;
				contentPanel.layout();
				
				compChercherTypeDocument.table.addListener (SWT.Selection, event -> {
					TableItem current = (TableItem)event.item;
					System.out.println (current.getText());
					
					
					
				});	
			}
		});
		mntmChercherTypeDocu.setText("Chercher un type de document");
		
		// Créer type document
		MenuItem mntmCreerTypeDocu = new MenuItem(menuTypeDocument, SWT.NONE);
		mntmCreerTypeDocu.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Menu Créer Type Document");
				DiagCreerTypeDocument diagCreerTypeDocument = new DiagCreerTypeDocument(shell,SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);
				diagCreerTypeDocument.open();
				nomDocument = diagCreerTypeDocument.nom;
				
				// Do Stuff.
			}
		});
		mntmCreerTypeDocu.setText("Cr\u00E9er un type de document");
		
		
		//
		// ?
		//
		MenuItem menuItem = new MenuItem(menu_1, SWT.CASCADE);
		menuItem.setText("?");
		
		Menu menuAide = new Menu(menuItem);
		menuItem.setMenu(menuAide);
		
		// Aide
		MenuItem mntmAide = new MenuItem(menuAide, SWT.NONE);
		mntmAide.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Menu Aide");
			}
		});
		mntmAide.setText("Aide");
		
		// A propos
		MenuItem mntmAPropos = new MenuItem(menuAide, SWT.NONE);
		mntmAPropos.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				System.out.println("Menu A propos");
			}
		});
		mntmAPropos.setText("A propos...");
		//
		// Fin Menu
		//
		
		//
		// Gestion Composites.
		//
		//Composite composite = new Composite(shell, SWT.NONE);
		
		
		
		
		shell.open();
		shell.layout();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}
		display.dispose();
	}
	@Override
	public void EleveErased(EleveErasedEvent e) {
		// TODO Auto-generated method stub
		
	}
}
